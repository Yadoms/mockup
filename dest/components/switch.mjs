class YadomsComponentSwitch{properties={};constructor(){}propsKeys(){return[]}render(n){let t="";return"button"==n.type?t=`\n        <button class="switch-button neumorphism ${n.state?"active":""}">\n          <i class="fas fa-${n.icon}"></i>\n        </button>\n      `:"arrow"==n.type?t='\n        <div class="switch-arrow joliePosition">\n          <button class="up shadow-inner" data-action="up">\n            <i class="fas fa-caret-up"></i>\n          </button>\n          <button class="down shadow-inner" data-action="down">\n            <i class="fas fa-caret-down"></i>\n          </button>\n        </div>\n      ':"toggle"==n.type&&(t=`\n        <div class="switch-toggle">\n          <div>\n            <input type="checkbox" ${1==n.state?"checked":""} />\n            <div class="wrapper shadow-inner">\n              <div class="round shadow transform"></div>\n            </div>\n          </div>\n        </div>\n      `),`\n      <div class="switch joliePosition">\n        ${t}\n      </div>\n    `}style(){return"\n      .switch-arrow {\n        flex-direction: column;\n      }\n\n      .switch-arrow button {\n        width: 2.5rem;\n        height: 2.5rem;\n        background-color: var(--activeColor);\n        color: var(--highlighColor);\n      }\n\n      .switch-arrow button:hover {\n        background-color: var(--highlightColor);\n        color: var(--activeColor);\n      }\n\n      .switch-arrow button.up {\n        border-top-left-radius: 0.25rem;\n        border-top-right-radius: 0.25rem;\n        border-bottom-width: 1px;\n        border-color: var(--frontColor);\n      }\n\n      .switch-arrow button.down {\n        border-bottom-left-radius: 0.25rem;\n        border-bottom-right-radius: 0.25rem;\n      }\n\n      .switch-button {\n        font-size: 1.875rem;\n        padding: 0.75rem;\n        border-radius: 0.5rem;\n        border-width: 1px;\n        color: var(--primaryColor);\n        background-color: var(--baseColor);\n        line-height: normal;\n        cursor: pointer;\n      }\n\n      .switch-button.active {\n        color: var(--highlightColor);\n      }\n\n      .switch-button i {\n        text-align: center;\n        width: 2.125rem;\n        height: 2.125rem;\n        line-height: 2.125rem;\n        display: block;\n      }\n\n      .switch-toggle {\n        display: inline-flex;\n        align-items: center;\n        cursor: pointer;\n        margin: 1rem 0;\n      }\n\n      .switch-toggle > div {\n        position: relative;\n      }\n\n      .switch-toggle > div input {\n        position: absolute;\n        opacity: 0;\n        left: 0;\n        top: 0;\n        width: 0;\n        height: 0;\n      }\n\n      .switch-toggle > div input[checked] ~ .wrapper {\n        background-color: var(--highlightColor);\n        box-shadow: 0 0 10px 0 var(--highlightColor);\n      }\n\n      .switch-toggle > div input[checked] ~ .wrapper .round {\n        --transform-translate-x: 100%;\n      }\n      \n      .switch-toggle > div .wrapper {\n        background-color: var(--activeColor);\n        border-radius: 9999px;\n        width: 2.5rem;\n        height: 1.5rem;\n      }\n\n      .switch-toggle > div .round {\n        position: absolute;\n        width: 1rem;\n        height: 1rem;\n        margin: 0.25rem;\n        border-radius: 9999px;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        background-color: var(--frontColor);\n        transition-property: transform;\n        transition-duration: 300ms;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      }\n\n      .switch-toggle:hover > div .wrapper {\n        background-color: var(--primaryColor) !important;\n        box-shadow: none;\n      }\n    "}init(n){n.querySelectorAll(".switch-toggle").length&&n.querySelector(".switch-toggle").addEventListener("click",n=>{n.stopPropagation();let t=n.currentTarget.querySelector("input");t.hasAttribute("checked")?t.removeAttribute("checked"):t.setAttribute("checked","checked")},!1),n.querySelectorAll(".switch-button").length&&n.querySelector(".switch-button").addEventListener("click",n=>{n.preventDefault();let t=n.currentTarget;t.classList.contains("active")?t.classList.remove("active"):t.classList.add("active"),n.stopPropagation()},!1)}update(n,t){}}export{YadomsComponentSwitch as YadomsComponent};