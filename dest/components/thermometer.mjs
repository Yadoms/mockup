class YadomsComponentThermometer{constructor(){}propsKeys(){return["value","min","max","unit","digital"]}render(n){let e=n.digital?"font-mono":"";return`\n      <div class="thermometer" \n          data-value="${n.value}"\n          data-min="${n.min}"\n          data-max="${n.max}">\n        <div class="tube">\n          <div class="liquid bar">\n            <div class="text-primaryColor">\n              <span class="value ${e}">${n.value}</span>\n              <span>${n.unit}</span>\n            </div>\n          </div>\n        </div>\n        <div class="bulb">\n          <div class="liquid"></div>\n        </div>\n      </div>\n    `}_generateTubeColor(n,e){return`\n      .thermometer${n} .liquid {\n        background-color: ${e};\n      }\n\n      .thermometer${n} .bulb {\n        box-shadow: 0 0 20px 0 ${e};\n      }\n    `}style(){return`\n      .thermometer {\n        align-items: center;\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        margin-left: -1.5rem;\n        padding-top: 0.5rem;\n      }\n\n      .thermometer .tube {\n        border-top-left-radius: 9999px;\n        border-top-right-radius: 9999px;\n        border-width: 2px;\n        border-bottom-width: 0;\n        border-color: #718096;\n        background-color: #fff;\n        width: 1.25rem;\n        height: 100%;\n        z-index: 10;\n        margin-bottom: -0.25rem;\n        display: inline-flex;\n        align-items: flex-end;\n        margin-left: -1.5rem;\n      }\n\n      .thermometer .tube .liquid {\n        border-top-left-radius: 9999px;\n        border-top-right-radius: 9999px;\n        height: 0;\n        width: 1.25rem;\n        margin: 0.25rem 0.25rem -0.25rem;\n        transition-property: all;\n        transition-duration: 700ms;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        position: relative;\n        font-size: .75rem;\n      }\n\n      .thermometer .tube .liquid > div {\n        position: absolute;\n        top: 0;\n        left: 0;\n        padding-left: 2rem;\n        margin-top: -0.5rem;\n        display: flex;\n      }\n\n      .thermometer .bulb {\n        border-radius: 9999px;\n        width: 2rem;\n        height: 2rem;\n        border: 2px;\n        border-color: #718096;\n        background-color: #fff;\n        display: inline-flex;\n        margin-left: -1.5rem;\n      }\n\n      .thermometer .bulb .liquid {\n        border-radius: 9999px;\n        width: 1.5rem;\n        height: 1.5rem;\n        margin: 0.25rem;\n        transition-property: background-color, border-color, color, fill, stroke;\n        transition-duration: 700ms;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      }\n\n      ${this._generateTubeColor("","#4a5568")}\n\n      ${this._generateTubeColor(".frost","#2b6cb0")}\n\n      ${this._generateTubeColor(".cold","#4c51bf")}\n\n      ${this._generateTubeColor(".normal","#6b46c1")}\n\n      ${this._generateTubeColor(".warm","#b83280")}\n\n      ${this._generateTubeColor(".hot","#c53030")}\n    `}_fever(n){const e=(n=n.querySelector(".thermometer")).dataset.min,r=n.dataset.max;let t=100*(n.dataset.value-e)/(r-e);n.querySelector(".bar").style.height=t+"%",t<20?n.classList.add("frost"):t<40?n.classList.add("cold"):t<60?n.classList.add("normal"):t<80?n.classList.add("warm"):n.classList.add("hot")}init(n){this._fever(n)}update(n,e){n.dataset.value=parseFloat(e),n.querySelector("span.value").innerText(e),this._fever(n)}}export{YadomsComponentThermometer as YadomsComponent};